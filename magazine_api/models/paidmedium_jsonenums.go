// Code generated by jsonenums -type=PaidMedium; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

var (
	_PaidMediumNameToValue = map[string]PaidMedium{
		"Cash":   Cash,
		"Bank":   Bank,
		"Online": Online,
	}

	_PaidMediumValueToName = map[PaidMedium]string{
		Cash:   "Cash",
		Bank:   "Bank",
		Online: "Online",
	}
)

func init() {
	var v PaidMedium
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PaidMediumNameToValue = map[string]PaidMedium{
			interface{}(Cash).(fmt.Stringer).String():   Cash,
			interface{}(Bank).(fmt.Stringer).String():   Bank,
			interface{}(Online).(fmt.Stringer).String(): Online,
		}
	}
}

// MarshalJSON is generated so PaidMedium satisfies json.Marshaler.
func (r PaidMedium) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PaidMediumValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PaidMedium: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PaidMedium satisfies json.Unmarshaler.
func (r *PaidMedium) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PaidMedium should be a string, got %s", data)
	}
	v, ok := _PaidMediumNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PaidMedium %q", s)
	}
	*r = v
	return nil
}

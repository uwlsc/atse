// Code generated by jsonenums -type=PaidStatus; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

var (
	_PaidStatusNameToValue = map[string]PaidStatus{
		"Complete": Complete,
		"Pending":  Pending,
	}

	_PaidStatusValueToName = map[PaidStatus]string{
		Complete: "Complete",
		Pending:  "Pending",
	}
)

func init() {
	var v PaidStatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_PaidStatusNameToValue = map[string]PaidStatus{
			interface{}(Complete).(fmt.Stringer).String(): Complete,
			interface{}(Pending).(fmt.Stringer).String():  Pending,
		}
	}
}

// MarshalJSON is generated so PaidStatus satisfies json.Marshaler.
func (r PaidStatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _PaidStatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid PaidStatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so PaidStatus satisfies json.Unmarshaler.
func (r *PaidStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PaidStatus should be a string, got %s", data)
	}
	v, ok := _PaidStatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid PaidStatus %q", s)
	}
	*r = v
	return nil
}

// Code generated by jsonenums -type=SalaryFormat; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

var (
	_SalaryFormatNameToValue = map[string]SalaryFormat{
		"PerPiece": PerPiece,
		"Hourly":   Hourly,
		"Daily":    Daily,
		"Monthly":  Monthly,
		"Yearly":   Yearly,
	}

	_SalaryFormatValueToName = map[SalaryFormat]string{
		PerPiece: "PerPiece",
		Hourly:   "Hourly",
		Daily:    "Daily",
		Monthly:  "Monthly",
		Yearly:   "Yearly",
	}
)

func init() {
	var v SalaryFormat
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SalaryFormatNameToValue = map[string]SalaryFormat{
			interface{}(PerPiece).(fmt.Stringer).String(): PerPiece,
			interface{}(Hourly).(fmt.Stringer).String():   Hourly,
			interface{}(Daily).(fmt.Stringer).String():    Daily,
			interface{}(Monthly).(fmt.Stringer).String():  Monthly,
			interface{}(Yearly).(fmt.Stringer).String():   Yearly,
		}
	}
}

// MarshalJSON is generated so SalaryFormat satisfies json.Marshaler.
func (r SalaryFormat) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SalaryFormatValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid SalaryFormat: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so SalaryFormat satisfies json.Unmarshaler.
func (r *SalaryFormat) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SalaryFormat should be a string, got %s", data)
	}
	v, ok := _SalaryFormatNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid SalaryFormat %q", s)
	}
	*r = v
	return nil
}
